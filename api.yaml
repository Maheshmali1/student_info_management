openapi: 3.0.1
info:
  title: Student Information Management Portal API docs
  description: This is Student information Management project API docs.
  version: "1.0"
servers:
- url: /
paths:
  /user/register:
    post:
      tags:
      - User APIs
      summary: API to create user in system
      description: This API is used to create a user in Student system using provided
        data.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: false
      responses:
        201:
          description: Success!
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User added successfully.
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
      x-codegen-request-body-name: user
  /user/login:
    post:
      tags:
      - User APIs
      summary: API to login user in system
      description: This API is used to login a user in Student system using provided
        data.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: false
      responses:
        200:
          description: Success!
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoibWFoZXNoIiwiaWF0IjoxNjg1NTAzNzU4LCJleHAiOjE2ODU1MDQ2NTh9.2AaCiKsNjXVmsJeW04aoJrPXwtAH9j0_E34NwxBAlJo
                      refreshToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoibWFoZXNoIiwiaWF0IjoxNjg1NTAzNzU4LCJleHAiOjE2ODU1MDQ5NTh9.D1dDoEERNQrS1rTbG2R3x4yRepLfmuJND4CMqWVN2uM
        401:
          description: Invalid password.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Password Incorrect!
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: could not find User with given username.
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
      x-codegen-request-body-name: user
  /user/logout:
    delete:
      tags:
      - User APIs
      summary: deleting a particular user details
      description: This api deletes a user information from Student system.
      requestBody:
        content:
          '*/*':
            schema:
              type: object
              properties:
                accessToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoibWFoZXNoIiwiaWF0IjoxNjg1NTAzNzU4LCJleHAiOjE2ODU1MDQ5NTh9.D1dDoEERNQrS1rTbG2R3x4yRepLfmuJND4CMqWVN2uM
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoibWFoZXNoIiwiaWF0IjoxNjg1NTAzNzU4LCJleHAiOjE2ODU1MDQ5NTh9.D1dDoEERNQrS1rTbG2R3x4yRepLfmuJND4CMqWVN2uM
        required: true
      responses:
        200:
          description: Success!
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: logged out user successfully.
        400:
          description: Invalid inputs
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: accessToken and refreshToken both should be present
        404:
          description: Token not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: could not find token with given token value.
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
      x-codegen-request-body-name: token
  /user/refreshToken:
    post:
      tags:
      - User APIs
      summary: API to get refreshToken of user in system
      description: This API is used to get refreshToken of user in Student system
        using provided data.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: mahesh123
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoibWFoZXNoIiwiaWF0IjoxNjg1NTAzNzU4LCJleHAiOjE2ODU1MDQ2NTh9.2AaCiKsNjXVmsJeW04aoJrPXwtAH9j0_E34NwxBAlJo
        required: false
      responses:
        201:
          description: Success!
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoibWFoZXNoIiwiaWF0IjoxNjg1NTAzNzU4LCJleHAiOjE2ODU1MDQ2NTh9.2AaCiKsNjXVmsJeW04aoJrPXwtAH9j0_E34NwxBAlJo
                      refreshToken:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoibWFoZXNoIiwiaWF0IjoxNjg1NTAzNzU4LCJleHAiOjE2ODU1MDQ5NTh9.D1dDoEERNQrS1rTbG2R3x4yRepLfmuJND4CMqWVN2uM
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Refresh token Invalid..
        404:
          description: Token not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: could not find token with given token value.
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
      x-codegen-request-body-name: user
  /student:
    get:
      tags:
      - student
      summary: To get all students
      description: This API returns the list of all students in the student system.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Success!
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StudentInfoResponse'
        500:
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Failure'
      security:
      - authentication: []
    post:
      tags:
      - student
      summary: API to create student in system
      description: This API is used to create a student in student system using provided
        data.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
        required: false
      responses:
        201:
          description: Success!
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: student added successfully.
        422:
          description: Unprocessable Entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unProcessableEntity'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
      x-codegen-request-body-name: student
  /student/{id}:
    get:
      tags:
      - student
      summary: Getting a particular student details
      description: This api returns a student object representing his all info
      parameters:
      - name: id
        in: path
        required: true
        schema: {}
      responses:
        200:
          description: Success!
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StudentInfoResponse'
        404:
          description: Student Not found
          content:
            '*/*':
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: could not find student with given studentId value.
        500:
          description: Internal server error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Failure'
    delete:
      tags:
      - student
      summary: deleting a particular student details
      description: This api deletes a student information from student system.
      parameters:
      - name: id
        in: path
        required: true
        schema: {}
      responses:
        200:
          description: Success!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentInfoResponse'
        404:
          description: Student Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: could not find student with given studentId value.
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
    patch:
      tags:
      - student
      summary: Updating a particular student details
      description: This api updates a student object representing his all info
      parameters:
      - name: id
        in: path
        required: true
        schema: {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
        required: false
      responses:
        200:
          description: Success!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentInfoResponse'
        404:
          description: Student Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: could not find student with given studentId value.
        422:
          description: Unprocessable Entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unProcessableEntity'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
      x-codegen-request-body-name: user

components:
  securitySchemes:
    bearerAuth:          
      type: http
      scheme: bearer
      bearerFormat: JWT   
  schemas:
    StudentInfoResponse:
      type: object
      properties:
        success:
          type: boolean 
          example: true
        data:
          type: object
          properties:
            studentId:
              type: string
              example: e7e48d27-55fb-4fd3-a93f-78bec2bc3934
            name:
              type: string
              example: Mahesh
            email:
              type: string
              example: mahesh@gmail.com
            phoneNo:
              type: string
              example: "9765040404"
            
    Student:
      type: object
      properties:
        name:
          type: string
          example: Mahesh
        email:
          type: string
          example: mahesh@gmail.com
        phoneNo:
          type: string
          example: "9765040404"
    User:
      type: object
      properties:
        username: 
          type: string
          example: mahesh
        password:
          type: string
          example: password123

    Failure:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          exmaple: error string

    unProcessableEntity:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: object
          properties:
            schemaPath:
              type: boolean
              example : false
            message:
              type: string
              exmaple: "Unable to proecess the given request!"

security:
  - bearerAuth: []      
