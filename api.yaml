swagger: '2.0'
info:
  title: Student Information Management Portal API docs
  description : This is Student information Management project API docs.
  version: 1.0
  licence :
    name: Apache 2.0
    url: 'http://apache.org/'

  servers:
    -url: 'http://loaclhost:3000/'
    description: This is my local server.

schemes: ['http','https']


paths:
  /user/register:
    post:
      summary: API to create user in system
      description: This API is used to create a user in Student system using provided data.
      tags: 
        - User APIs
      produces: 
        - application/json
      consumes: 
        - application/json
      parameters:
      - in: body
        name: user
        schema:
          $ref: '#/components/schemas/User'
      responses: 
        201:
          description: Success!
          schema :
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: User added successfully.
        500:
          description: Internal server error
          schema :
            $ref: '#/components/schemas/Failure'      

  
  /user/login:
    post:
      summary: API to login user in system
      description: This API is used to login a user in Student system using provided data.
      tags: 
        - User APIs
      produces: 
        - application/json
      consumes: 
        - application/json
      parameters:
      - in: body
        name: user
        schema:
          $ref: '#/components/schemas/User'
      responses: 
        200:
          description: Success!
          schema :
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoibWFoZXNoIiwiaWF0IjoxNjg1NTAzNzU4LCJleHAiOjE2ODU1MDQ2NTh9.2AaCiKsNjXVmsJeW04aoJrPXwtAH9j0_E34NwxBAlJo
                  refreshToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoibWFoZXNoIiwiaWF0IjoxNjg1NTAzNzU4LCJleHAiOjE2ODU1MDQ5NTh9.D1dDoEERNQrS1rTbG2R3x4yRepLfmuJND4CMqWVN2uM

        401:
          description: Invalid password.
          schema:
            type: object
            properties:
              success: 
                type: boolean
                example: false
              message:
                type: string
                example: Password Incorrect!     
        404:
          description: User not found
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: could not find User with given username.      
        500:
          description: Internal server error
          schema :
            $ref: '#/components/schemas/Failure'     

  /user/logout:
    delete:
      summary: deleting a particular user details
      description : This api deletes a user information from Student system.
      tags: 
        - User APIs
      produces: 
        - application/json
      parameters:
        - name: token
          in: body
          required: true
          schema :
            type : object
            properties:
              accessToken:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoibWFoZXNoIiwiaWF0IjoxNjg1NTAzNzU4LCJleHAiOjE2ODU1MDQ5NTh9.D1dDoEERNQrS1rTbG2R3x4yRepLfmuJND4CMqWVN2uM
              refreshToken:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoibWFoZXNoIiwiaWF0IjoxNjg1NTAzNzU4LCJleHAiOjE2ODU1MDQ5NTh9.D1dDoEERNQrS1rTbG2R3x4yRepLfmuJND4CMqWVN2uM
      responses: 
        200:
          description: Success!
          schema:
            type: object
            properties:
              success: 
                type: boolean
                example: true
              message:
                type: string
                example: logged out user successfully.
        400: 
          description: Invalid inputs
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: accessToken and refreshToken both should be present
        404:
          description: Token not found
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: could not find token with given token value.
        500:
          description: Internal server error
          schema :
            $ref: '#/components/schemas/Failure'     

  /user/refreshToken:
    post:
      summary: API to get refreshToken of user in system
      description: This API is used to get refreshToken of user in Student system using provided data.
      tags: 
        - User APIs
      produces: 
        - application/json
      consumes: 
        - application/json
      parameters:
      - in: body
        name: user
        schema:
          type: object
          properties:
            username: 
              type: string
              example: mahesh123
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoibWFoZXNoIiwiaWF0IjoxNjg1NTAzNzU4LCJleHAiOjE2ODU1MDQ2NTh9.2AaCiKsNjXVmsJeW04aoJrPXwtAH9j0_E34NwxBAlJo
      responses: 
        201:
          description: Success!
          schema :
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoibWFoZXNoIiwiaWF0IjoxNjg1NTAzNzU4LCJleHAiOjE2ODU1MDQ2NTh9.2AaCiKsNjXVmsJeW04aoJrPXwtAH9j0_E34NwxBAlJo
                  refreshToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoibWFoZXNoIiwiaWF0IjoxNjg1NTAzNzU4LCJleHAiOjE2ODU1MDQ5NTh9.D1dDoEERNQrS1rTbG2R3x4yRepLfmuJND4CMqWVN2uM

        401:
          description: Unauthorized
          schema:
            type: object
            properties:
              success: 
                type: boolean
                example: false
              message:
                type: string
                example: Refresh token Invalid.. 
        404:
          description: Token not found
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: could not find token with given token value.          
        500:
          description: Internal server error
          schema :
            $ref: '#/components/schemas/Failure'     
  /student:
    get:
      summary : To get all students
      description: This API returns the list of all students in the student system.
      tags: 
        - student
      responses: 
        200:
          description: Success!
          schema :
            $ref : '#/components/schemas/StudentInfoResponse'   
        500:
          description: Internal server error
          schema :
            $ref: '#/components/schemas/Failure'

    post:
      summary: API to create student in system
      description: This API is used to create a student in student system using provided data.
      tags: 
        - student
      produces: 
        - application/json
      consumes: 
        - application/json
      parameters:
      - in: body
        name: student
        schema:
          $ref: '#/components/schemas/Student'
      responses: 
        201:
          description: Success!
          schema :
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: student added successfully.
        422:
          description: Unprocessable Entity.
          schema :
            $ref: '#/components/schemas/unProcessableEntity'
        500:
          description: Internal server error
          schema :
            $ref: '#/components/schemas/Failure'
      
  /student/{id}:
    get:
      summary: Getting a particular student details
      description : This api returns a student object representing his all info
      tags: 
        - student
      parameters:
        - name: id
          in: path
          required: true
          schema :
            type : string

      responses: 
        200:
          description: Success!
          schema :
            $ref : '#/components/schemas/StudentInfoResponse'   
        404:
          description: Student Not found
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: could not find student with given studentId value.   
        500:
          description: Internal server error
          schema :
            $ref: '#/components/schemas/Failure'

    patch:
      summary: Updating a particular student details
      description : This api updates a student object representing his all info
      tags: 
        - student
      produces: 
        - application/json
      consumes: 
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          schema :
            type : string
        - in: body
          name: user
          schema:
            $ref: '#/components/schemas/Student'
      responses: 
        200:
          description: Success!
          schema :
            $ref : '#/components/schemas/StudentInfoResponse'
        404:
          description: Student Not found
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: could not find student with given studentId value. 
        422:
          description: Unprocessable Entity.
          schema :
            $ref: '#/components/schemas/unProcessableEntity'
        500:
          description: Internal server error
          schema :
            $ref: '#/components/schemas/Failure'

    delete:
      summary: deleting a particular student details
      description : This api deletes a student information from student system.
      tags: 
        - student
      produces: 
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          schema :
            type : string
      responses: 
        200:
          description: Success!
          schema :
            $ref : '#/components/schemas/StudentInfoResponse'
        404:
          description: Student Not found
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: could not find student with given studentId value. 
        500:
          description: Internal server error
          schema :
            $ref: '#/components/schemas/Failure'

components:
  schemas:
    StudentInfoResponse:
      type: object
      properties:
        success:
          type: boolean 
          example: true
        data:
          type: object
          properties:
            studentId:
              type: string
              example: e7e48d27-55fb-4fd3-a93f-78bec2bc3934
            name:
              type: string
              example: Mahesh
            email:
              type: string
              example: mahesh@gmail.com
            phoneNo:
              type: string
              example: "9765040404"
            
    Student:
      type: object
      properties:
        name:
          type: string
          example: Mahesh
        email:
          type: string
          example: mahesh@gmail.com
        phoneNo:
          type: string
          example: "9765040404"
    User:
      type: object
      properties:
        username: 
          type: string
          example: mahesh
        password:
          type: string
          example: password123

    Failure:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          exmaple: error string

    unProcessableEntity:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: object
          properties:
            schemaPath:
              type: boolean
              example : false
            message:
              type: string
              exmaple: "Unable to proecess the given request!"

